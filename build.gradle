import static groovy.io.FileType.*

// Plugins
plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = 1.7

// Project structure
sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
	}
	test {
		java {
			srcDir 'src/test/java'
		}
	}
}

// Use jcenter
repositories {
	jcenter()
}

// Dependencies
dependencies {
	compile group: 'net.freehaven.tor.control', name: 'jtorctl', version: '0.2'
	compile group: 'commons-net', name: 'commons-net', version: '3.3'
	compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
	compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.67'
	compile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.67'
	compile group: 'com.esotericsoftware', name: 'kryo', version: '4.0.0'
	compile group: 'com.google.code.findbugs', name: 'findbugs-annotations', version: '3.0.1'
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

// Checkstyle
checkstyle {
	toolVersion = "6.12.1"
}

// Test coverage
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination  = file("${buildDir}/jacocoHtml")
    }

	afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'edu/kit/tm/ptp/examples/**')
        })
    }
}

// Findbugs
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Create tasks to create a jar file for each example
File srcDir = file(sourceSets.main.java.srcDirs[0].getAbsolutePath() + '/edu/kit/tm/ptp/examples')
def names = []
srcDir.eachFileMatch FILES, ~/.*\.java/, { file -> names << file.name  }
String exName

names.each { fileName -> 
   	exName = fileName.split("\\.")[0]
	tasks.create(name: exName, type:Jar) {
		from sourceSets.main.output
		manifest {
			attributes 'Main-Class': 'edu.kit.tm.ptp.examples.' + exName
		}
		from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
		exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
		baseName = exName
		destinationDir = new File("build/examples")
	}
}

jar {
  dependsOn = tasks.findAll { task -> task.name.contains('Example') }
}

// Pack all dependencies into the fat jar
// For use in a non-Gradle Java project
task fatjar (type: Jar) {
 from sourceSets.main.output
 from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
 exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
 baseName = 'PTP-full'
}

jar.dependsOn fatjar

// Outputs when running tests
test.testLogging { 
  showExceptions = true
  showCauses = true
  showStackTraces = true
  events = ['started', 'failed', 'passed', 'skipped']
  exceptionFormat = 'full'
} 

// Required for package to be included in jCenter
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

// Upload to Bintray to add package to jCenter
bintray {
    // Set bintrayUser and bintrayApiKey in gradle.properties
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['MyPublication']

    pkg {
        repo = 'PTP'
        name = 'ptp'
        userOrg = 'kit-tm'
        licenses = ['GPL-3.0']
        vcsUrl = 'https://github.com/kit-tm/PTP.git'

        version {
            name = 'v0.4.1'
            desc = ''
            released  = new Date()
            vcsTag = 'v0.4.1'
        }
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'edu.kit.tm.ptp'
            artifactId 'ptp'
            version 'v0.4.1'

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}
